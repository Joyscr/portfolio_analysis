# -*- coding: utf-8 -*-
"""port_new

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AgCrEsmxUHXiiNyWuAu31Px8UfW_01BM
"""

from google.colab import auth
auth.authenticate_user()

import gspread
from google.auth import default
creds, _ = default()

gc = gspread.authorize(creds)

import pandas as pd
spreadsheets = gc.open_by_url("https://docs.google.com/spreadsheets/d/1-OmGJ_nN3JrxiC5TqLPVgOpz95udMxzIwHbEt9oGUVw/edit?usp=sharing")

data = spreadsheets.worksheet('index & portfolio net value').get_all_values()
rate = spreadsheets.worksheet('price(NTD)').get_all_values()

selected_data = [[row[0], row[2],row[3], row[4]] for row in data] #抓日期、創新板指數、基金淨值
s = [[i[0],i[15]] for i in rate] #抓日期、匯率

df = pd.DataFrame(selected_data[1:], columns=selected_data[0]) #columns=selected_data[0]日期作為列名
df1 = pd.DataFrame(s[1:], columns = s[0]) #columns = s[0]日期作為列名
out = pd.concat([df['日期'], df['備註'], df['臺灣指數公司臺灣創新板指數（IX0197）'], df1["台幣匯率"], df['基金淨值']], axis=1) #資料合併

out["基金淨值"][0]=100000000 #輸入3/15基金淨值
out["台幣匯率"][0]=31.87 #輸入3/15台幣收盤匯率

import numpy as np

column_name = "備註"
valid_indices = out[column_name].str.strip() == ""
out = out[valid_indices].reset_index(drop=True)

#美元計價創新板指數
index_values = np.array([np.nan if val == '' else float(val) for val in out["臺灣指數公司臺灣創新板指數（IX0197）"]])
exchange_rates = np.array([np.nan if val == '' else float(val) for val in out["台幣匯率"]])
usd_index = np.where(exchange_rates != "", index_values / exchange_rates, np.nan)
out.insert(4,"美元計價創新板指數",usd_index)

#匯率波動幅度
exchange_rates_v = np.zeros(len(out["日期"]))
exchange_rates_v[1:] = np.diff(exchange_rates) / exchange_rates[:-1] * 100
out.insert(4,"匯率波動幅度（%）",exchange_rates_v)

#指標報酬率
rit = np.zeros(len(out["日期"]))
rit[1:] = np.diff(index_values) / index_values[:-1] * 100

#美元計價指標報酬率
rmt = np.zeros(len(out["日期"]))
rmt[1:] = np.diff(usd_index) / usd_index[:-1] * 100

#基金報酬率
fund_values = np.array([np.nan if val == '' else float(val) for val in out["基金淨值"]])
rpt = np.zeros(len(out["日期"]))
rpt[1:] = np.diff(fund_values) / fund_values[:-1] * 100


out["指標當日報酬率（%）"] = rit
out["美元計價指標當日報酬率（%）rm,t"] = rmt
out["基金當日報酬率（%）rp,t"] = rpt

out = out.drop(columns=["備註"])
out.rename(columns={"臺灣指數公司臺灣創新板指數（IX0197）": "創新板指數"}, inplace=True)

display(out)

fund_average = out["基金當日報酬率（%）rp,t"][1:].mean()
market_average = out["美元計價指標當日報酬率（%）rm,t"][1:].mean()


rpt_column = "基金當日報酬率（%）rp,t"
rmt_column = "美元計價指標當日報酬率（%）rm,t"

valid_indices = ~np.isnan(out[rpt_column]) & ~np.isnan(out[rmt_column])
a = np.sum((out[rpt_column][valid_indices][1:] - fund_average) * (out[rmt_column][valid_indices][1:] - market_average))
b = np.sum((out[rmt_column][valid_indices][1:] - market_average) ** 2)
beta = a/b

rf = 0.0003
alpha = fund_average - (rf + beta * (market_average - rf))

print("fund average:\t", fund_average)
print("market average:\t", market_average)
print("beta:\t\t", beta)
print("alpha:\t\t", alpha)

fund_average = out["基金當日報酬率（%）rp,t"][1:].mean()
market_average = out["指標當日報酬率（%）"][1:].mean()


rpt_column = "基金當日報酬率（%）rp,t"
rmt_column = "指標當日報酬率（%）"

valid_indices = ~np.isnan(out[rpt_column]) & ~np.isnan(out[rmt_column])
a = np.sum((out[rpt_column][valid_indices][1:] - fund_average) * (out[rmt_column][valid_indices][1:] - market_average))
b = np.sum((out[rmt_column][valid_indices][1:] - market_average) ** 2)
beta = a/b

rf = 0.0003
alpha = fund_average - (rf + beta * (market_average - rf))

print("fund average:\t", fund_average)
print("market average:\t", market_average)
print("beta:\t\t", beta)
print("alpha:\t\t", alpha)

import numpy as np

a = np.nan_to_num(out["匯率波動幅度（%）"])
b = np.nan_to_num(out["美元計價指標當日報酬率（%）rm,t"])
y = np.nan_to_num(out["基金當日報酬率（%）rp,t"])

valid_indices = ~np.isnan(a)
a_clean = a[valid_indices]
b_clean = b[valid_indices]
y_clean = y[valid_indices]

import statsmodels.api as sm
X1 = sm.add_constant(a)
X2 = sm.add_constant(b)
X = sm.add_constant(np.column_stack((a, b)))

model = sm.OLS(y, X).fit()
print(model.summary())

coefficients = model.params[1:]

variable_names = ["匯率波動幅度（%）", "美元計價指標當日報酬率（%）rm,t"]

for variable, coefficient in zip(variable_names, coefficients):
    print(f"{variable} 的迴歸係數: {coefficient}")